<?php

namespace Kunstmaan\NodeBundle\Tests\Helper\Menu;

use Doctrine\ORM\EntityManager;

use Knp\Menu\Silex\RouterAwareFactory;

use Kunstmaan\NodeBundle\Helper\Menu\ActionsMenuBuilder;
use Kunstmaan\NodeBundle\Tests\Stubs\TestRepository;
use Kunstmaan\NodeBundle\Entity\NodeTranslation;
use Kunstmaan\NodeBundle\Entity\NodeVersion;
use Kunstmaan\NodeBundle\Entity\Node;

use Symfony\Component\Routing\RouterInterface;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\Security\Core\SecurityContextInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-23 at 10:49:47.
 */
class ActionsMenuBuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ActionsMenuBuilder
     */
    protected $builder;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @covers Kunstmaan\NodeBundle\Helper\Menu\ActionsMenuBuilder::__construct
     */
    protected function setUp()
    {
        /* @var UrlGeneratorInterface $urlGenerator */
        $urlGenerator = $this->getMock('Symfony\Component\Routing\Generator\UrlGeneratorInterface');
        $factory = new RouterAwareFactory($urlGenerator);
        $em = $this->getMockedEntityManager();
        /* @var EventDispatcherInterface $dispatcher */
        $dispatcher = $this->getMock('Symfony\Component\EventDispatcher\EventDispatcherInterface');
        /* @var RouterInterface $router */
        $router = $this->getMock('Symfony\Component\Routing\RouterInterface');
        $context = $this->getMock('Symfony\Component\Security\Core\SecurityContextInterface');
        $context->expects($this->any())
            ->method('isGranted')
            ->will($this->returnValue(true));

        /* @var SecurityContextInterface $context */
        $this->builder = new ActionsMenuBuilder($factory, $em, $router, $dispatcher, $context);
    }

    /**
     * https://gist.github.com/1331789
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected function getMockedEntityManager()
    {
        $emMock  = $this->getMock('\Doctrine\ORM\EntityManager', array('getRepository', 'getClassMetadata', 'persist', 'flush'), array(), '', false);
        $emMock->expects($this->any())
            ->method('getRepository')
            ->will($this->returnValue(new TestRepository()));
        $emMock->expects($this->any())
            ->method('getClassMetadata')
            ->will($this->returnValue((object) array('name' => 'aClass')));
        $emMock->expects($this->any())
            ->method('persist')
            ->will($this->returnValue(null));
        $emMock->expects($this->any())
            ->method('flush')
            ->will($this->returnValue(null));

        return $emMock;  // it tooks 13 lines to achieve mock!
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kunstmaan\NodeBundle\Helper\Menu\ActionsMenuBuilder::createSubActionsMenu
     */
    public function testCreateSubActionsMenu()
    {
        $nodeTranslation = new NodeTranslation();
        $nodeTranslation->setNode(new Node());

        // Create Mock for $nodeTranslation->getRef(). Should return a TestEntity.
        $nodeVersionStub = $this->getMockBuilder('Kunstmaan\NodeBundle\Entity\NodeVersion')
            ->getMock();

        $testEntity = new \Kunstmaan\NodeBundle\Tests\Entity\TestEntity();
        $nodeVersionStub->expects($this->any())
            ->method('getRef')
            ->will($this->returnValue($testEntity));

        $nodeVersionStub->expects($this->any())
            ->method('getNodeTranslation')
            ->will($this->returnValue($nodeTranslation));

        $this->builder->setActiveNodeVersion($nodeVersionStub);


        $menu = $this->builder->createSubActionsMenu();
        $this->assertNotNull($menu->getChild('subaction.versions'));

        $this->assertEquals($menu->getChildrenAttribute('class'), 'sub_actions');
    }

    /**
     * @covers Kunstmaan\NodeBundle\Helper\Menu\ActionsMenuBuilder::createActionsMenu
     */
    public function testCreateActionsMenuDraft()
    {
        $nodeTranslation = new NodeTranslation();
        $nodeTranslation->setNode(new Node());

        // Create Mock for $nodeTranslation->getRef(). Should return a TestEntity.
        $nodeVersionStub = $this->getMockBuilder('Kunstmaan\NodeBundle\Entity\NodeVersion')
            ->getMock();

        $testEntity = new \Kunstmaan\NodeBundle\Tests\Entity\TestEntity();
        $nodeVersionStub->expects($this->any())
            ->method('getRef')
            ->will($this->returnValue($testEntity));

        $nodeVersionStub->expects($this->any())
            ->method('getNodeTranslation')
            ->will($this->returnValue($nodeTranslation));

        $nodeVersionStub->expects($this->any())
            ->method('getType')
            ->will($this->returnValue('draft'));

        $this->builder->setActiveNodeVersion($nodeVersionStub);


        $menu = $this->builder->createActionsMenu();
        $this->assertNotNull($menu->getChild('action.saveasdraft'));
        $this->assertNotNull($menu->getChild('action.publish'));
        $this->assertNotNull($menu->getChild('action.preview'));
        $this->assertNull($menu->getChild('action.save'));
        // This one doesn't show unless the node has a parent.
        // $this->assertNotNull($menu->getChild('action.delete'));

        $this->assertEquals($menu->getChildrenAttribute('class'), 'main_actions btn-group');
    }

    public function testCreateActionsMenuPublic()
    {
        $nodeTranslation = new NodeTranslation();
        $nodeTranslation->setNode(new Node());

        // Create Mock for $nodeTranslation->getRef(). Should return a TestEntity.
        $nodeVersionStub = $this->getMockBuilder('Kunstmaan\NodeBundle\Entity\NodeVersion')
            ->getMock();

        $testEntity = new \Kunstmaan\NodeBundle\Tests\Entity\TestEntity();
        $nodeVersionStub->expects($this->any())
            ->method('getRef')
            ->will($this->returnValue($testEntity));

        $nodeVersionStub->expects($this->any())
            ->method('getNodeTranslation')
            ->will($this->returnValue($nodeTranslation));

        $nodeVersionStub->expects($this->any())
            ->method('getType')
            ->will($this->returnValue('public'));

        $this->builder->setActiveNodeVersion($nodeVersionStub);
        $nodeTranslation->setOnline(false);


        $menu = $this->builder->createActionsMenu();
        $this->assertNotNull($menu->getChild('action.save'));
        $this->assertNotNull($menu->getChild('action.saveasdraft'));
        $this->assertNotNull($menu->getChild('action.preview'));
        $this->assertNotNull($menu->getChild('action.publish'));
        $this->assertNull($menu->getChild('action.unpublish'));
        // This one doesn't show unless the node has a parent.
        // $this->assertNotNull($menu->getChild('action.delete'));

        $nodeTranslation->setOnline(true);
        $menu = $this->builder->createActionsMenu();
        $this->assertNotNull($menu->getChild('action.save'));
        $this->assertNotNull($menu->getChild('action.saveasdraft'));
        $this->assertNotNull($menu->getChild('action.preview'));
        $this->assertNull($menu->getChild('action.publish'));
        $this->assertNotNull($menu->getChild('action.unpublish'));
        // This one doesn't show unless the node has a parent.
        // $this->assertNotNull($menu->getChild('action.delete'));

        $this->assertEquals($menu->getChildrenAttribute('class'), 'main_actions btn-group');
    }

    /**
     * @covers Kunstmaan\NodeBundle\Helper\Menu\ActionsMenuBuilder::createTopActionsMenu
     */
    public function testCreateTopActionsMenu()
    {
        $nodeTranslation = new NodeTranslation();
        $nodeTranslation->setNode(new Node());

        // Create Mock for $nodeTranslation->getRef(). Should return a TestEntity.
        $nodeVersionStub = $this->getMockBuilder('Kunstmaan\NodeBundle\Entity\NodeVersion')
            ->getMock();

        $testEntity = new \Kunstmaan\NodeBundle\Tests\Entity\TestEntity();
        $nodeVersionStub->expects($this->any())
            ->method('getRef')
            ->will($this->returnValue($testEntity));

        $nodeVersionStub->expects($this->any())
            ->method('getNodeTranslation')
            ->will($this->returnValue($nodeTranslation));

        $this->builder->setActiveNodeVersion($nodeVersionStub);


        $menu = $this->builder->createTopActionsMenu();
        $this->assertEquals($menu->getChildrenAttribute('class'), 'main_actions top');
        $this->assertEquals($menu->getChildrenAttribute('id'), 'main_actions_top');
    }

    /**
     * @covers Kunstmaan\NodeBundle\Helper\Menu\ActionsMenuBuilder::setActiveNodeVersion
     * @covers Kunstmaan\NodeBundle\Helper\Menu\ActionsMenuBuilder::getActiveNodeVersion
     */
    public function testSetGetActiveNodeVersion()
    {
        $nodeVersion = new NodeVersion();
        $this->builder->setActiveNodeVersion($nodeVersion);
        $this->assertEquals($this->builder->getActiveNodeVersion(), $nodeVersion);
    }

}
