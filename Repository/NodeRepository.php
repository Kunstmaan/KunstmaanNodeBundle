<?php

namespace Kunstmaan\AdminNodeBundle\Repository;

use Kunstmaan\AdminNodeBundle\Entity\HasNodeInterface;
use Kunstmaan\AdminBundle\Entity\User as Baseuser;
use Kunstmaan\AdminNodeBundle\Entity\Node;
use Kunstmaan\AdminBundle\Modules\ClassLookup;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * NodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NodeRepository extends EntityRepository
{
	public function getTopNodes($lang, $user, $permission, $includehiddenfromnav = false) {
	   return $this->getChildNodes(null, $lang, $user, $permission, $includehiddenfromnav); 
	}

	public function getNodeFor(HasNodeInterface $hasNode) {
		$nodeVersion = $this->getEntityManager()->getRepository('KunstmaanAdminNodeBundle:NodeVersion')->getNodeVersionFor($hasNode);
		if(!is_null($nodeVersion)){
			$nodeTranslation = $nodeVersion->getNodeTranslation();
			if(!is_null($nodeTranslation)){
				return $nodeTranslation->getNode();
			}
		}
		return null;
	}

	public function getNodeForIdAndEntityname($id, $entityName) {
		$nodeVersion = $this->getEntityManager()->getRepository('KunstmaanAdminNodeBundle:NodeVersion')->findOneBy(array('refId' => $id, 'refEntityname' => $entityName));
		if($nodeVersion){
			return $nodeVersion->getNodeTranslation()->getNode();
		}
		return null;
	}

	public function getNodeForSlug($parentNode, $slug){
		$slugparts = explode("/", $slug);
		$result = null;
		foreach($slugparts as $slugpart){
			if($parentNode){
				if($r = $this->findOneBy(array('slug' => $slugpart, 'parent.parent' => $parentNode->getId()))){
					$result = $r;
				}
			} else {
				if($r = $this->findOneBy(array('slug' => $slugpart))){
					$result = $r;
				}
			}
		}
		return $result;
	}

	public function createNodeFor(HasNodeInterface $hasNode, $lang, Baseuser $owner, $internalName = null){
		$em = $this->getEntityManager();
		$classname = ClassLookup::getClass($hasNode);
		if(!$hasNode->getId()>0){
			throw new \Exception("the entity of class ". $classname . " has no id, maybe you forgot to flush first");
		}
		$entityrepo = $em->getRepository($classname);
		$node = new Node();
		$node->setRefEntityname($classname);
		$node->setDeleted(false);
		$node->setInternalName($internalName);
		$parent = $hasNode->getParent();
		if($parent){
			$parentNodeVersion = $em->getRepository('KunstmaanAdminNodeBundle:NodeVersion')->findOneBy(array('refId' => $parent->getId(), 'refEntityname' => ClassLookup::getClass($parent)));
			if($parentNodeVersion){
				$node->setParent($parentNodeVersion->getNodeTranslation()->getNode());
				$node->setRoles($parentNodeVersion->getNodeTranslation()->getNode()->getRoles());
			}
		}
		$em->persist($node);
		$em->flush();
		$em->refresh($node);
		$nodeTranslation = $em->getRepository('KunstmaanAdminNodeBundle:NodeTranslation')->createNodeTranslationFor($hasNode, $lang, $node, $owner);
		return $node;
	}
	
	public function getChildNodes($parent_id, $lang, $user, $permission, $includehiddenfromnav = false){
	    $qb = $this->createQueryBuilder('b')
	    ->select('b')
	    ->innerJoin("b.nodeTranslations", "t")
	    ->where('b.deleted = 0');
        if (!$includehiddenfromnav) {
	        $qb->andWhere('b.hiddenfromnav != true');
	    }
	    $qb->andWhere('b.id IN (
	            SELECT p.refId FROM Kunstmaan\AdminBundle\Entity\Permission p WHERE p.refEntityname = ?1 AND p.permissions LIKE ?2 AND p.refGroup IN(?3)
	    )')
	    ->andWhere("t.lang = :lang")
	    ->andWhere("b.parent = :parent")
	    
	    ->addOrderBy('t.weight', 'ASC')
        ->addOrderBy('t.title', 'ASC')
	    ->setParameter(1, 'Kunstmaan\AdminNodeBundle\Entity\Node')
	    ->setParameter(2, '%|'.$permission.':1|%');
	    $groupIds = $user->getGroupIds();
	    if (!empty($groupIds)) {
	        $qb->setParameter(3, $groupIds);
	    }
	    else {
	        $qb->setParameter(3, null);
	    }
	    $qb->setParameter("lang", $lang);
	    $qb->setParameter("parent", $parent_id);
	    
	    $result = $qb->getQuery()->getResult();

	    return $result; 
	}

}